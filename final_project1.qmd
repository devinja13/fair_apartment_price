---
title: "Apartment Regression"
format: pdf
editor: visual
---

Libraries

```{r, echo=TRUE}
library(ggplot2)
library(data.table)
library(dplyr)
library(stringr)


```

```{r}

data <- read.csv2("apartments.csv")

```

Data Cleaning

```{r}
cleaned <- data %>%
              filter(currency == "USD", price_type == "Monthly", nchar(state) == 2, bathrooms != "null", !bedrooms %in% c("null", "USD", "") ) %>%
              mutate(pets_allowed = ifelse(pets_allowed %in% c("Cats", "Dogs", "Cats, Dogs", "Cats, Dogs, None"), 1, 0)) %>%
              mutate(has_photo = ifelse(has_photo %in% c("Thumbnail", "Yes"), 1, 0)) %>%
              mutate(fee = ifelse(fee == "Yes", 1, 0))
  




cleaned$category <- as.factor(cleaned$category)
cleaned$pets_allowed <- as.factor(cleaned$pets_allowed)
cleaned$has_photo <- as.factor(cleaned$has_photo)
cleaned$fee <- as.factor(cleaned$fee)
cleaned$state <- as.factor(cleaned$state)



```

Adding the city population and density to the data

```{r, echo=TRUE}

cities <- read.csv("uscities.csv")

cleaned <- cleaned %>%
  mutate(city = tolower(cityname), state = tolower(state))
cities <- cities %>%
  mutate(city = tolower(city), state = tolower(state_id))

cleaned <- cleaned %>%
  mutate(city = trimws(city), state = trimws(state))
cities <- cities %>%
  mutate(city = trimws(city), state = trimws(state))


data <- cleaned %>%
  left_join(cities %>% select(city, state, population, density), 
            by = c("city", "state"))

#can do either median or mean. 
pop_mean <- (mean(cities$population, na.rm=TRUE))

density_med <- mean(cities$density, na.rm=TRUE)

cleaned <- mutate(data, population = ifelse(is.na(population), pop_mean, population), density = ifelse(is.na(density), density_med, density))

```

1.  If we want we could create categorical variables for each of the ammenitites like AC, fridge, gym, basketball, etc

Getting the data

```{r}

Y <- cleaned$price

x <- select(cleaned, as.numeric(bathrooms), bedrooms, fee, has_photo, pets_allowed, price)

cleaned$bathrooms <- as.numeric(cleaned$bathrooms)
cleaned$bedrooms <- as.numeric(cleaned$bedrooms)
cleaned$price <- as.numeric(cleaned$price)
cleaned$density <- as.numeric(cleaned$density)
cleaned$population <- as.numeric(cleaned$population)
cleaned$square_feet <- as.numeric(cleaned$square_feet)


```

Correlation Matrix


```{r, echo=TRUE}

model <- lm(y ~ bathrooms, data = x)


```



```{r, echo=TRUE}

paste0(list, collaspe=",")

regressor_list <- c("square_feet", "has_photo", "fee", "density", "population", "bathrooms", "bedrooms")

model <- lm(price ~ bedrooms, data = cleaned)
summary(model)


# Run the regression function
best_predictor <- regression(regressor_list, "")
print(best_predictor)


lm(price ~ square_feet, data=cleaned)

regression <- function(regressors, add_col = NULL) {
  low_pval <- 10
  best_var <- NULL
  
  # Iterate through the regressors
  for (i in regressors) {
    # Dynamically create the formula
    if (is.null(add_col) || length(add_col) == 0) {
      formula <- reformulate(i, response = "price")
    } else {
      formula <- reformulate(c(add_col, i), response = "price")
    }
    
    # Fit the linear model
    model <- lm(formula, data = cleaned)
    sum <- summary(model)
    
    # Extract the p-value for the slope (the last row of coefficients)
    # Ensure the slope term exists
    if (nrow(sum$coefficients) > 1) {
      pvalue <- sum$coefficients[nrow(sum$coefficients), "Pr(>|t|)"]
      
      # Update the lowest p-value and corresponding variable
      if (pvalue < low_pval) {
        low_pval <- pvalue
        best_var <- i
      }
    }
  }
  
  # Return the variable with the lowest p-value
  return(best_var)
}

# Example usage:
regressor_list <- c("bathrooms")
always_include <- c("square_feet", "density", "population", "bedrooms", "has_photo", "fee") # Example additional variables
best_predictor <- regression(regressor_list, always_include)
print(best_predictor)

model <- lm(price ~ square_feet + density + population + bedrooms+
              has_photo + fee + pets_allowed + bathrooms, data = cleaned)

summary(model)

```


